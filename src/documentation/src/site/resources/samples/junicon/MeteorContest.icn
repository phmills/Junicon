#====
# meteor-contest.icn
#
# The Computer Language Benchmarks Game
# http://shootout.alioth.debian.org/
# Translated from Olof Kraigher's 
# Python program
#====
$ifdef JUNICON
package edu.uidaho.junicon.test.junicon;
$endif

# global width, height, masksAtCell 
# global solutions, masks, directions 
# global rotate, flip, moves, pieces

record xy(x, y)

class MeteorContest () {
  local width, height, masksAtCell;
  local solutions, masks, directions;
  local rotate, flip, moves, pieces;

method findFreeCell(board)
   local bitposn, y, x;
   bitposn := 1
   every y := 0 to height - 1 do {
      every x := 0 to width - 1 do {
         if iand(board, bitposn) = 0 then
            return xy(x, y)
	 bitposn := ishift(bitposn, 1)
         }
      }
end

method floodFill(board, coords)
   local x, y, bitposn;
   x := coords.x
   y := coords.y
   bitposn := ishift(1, x + width * y)
   
   if (not valid(x,y)) | (iand(board, bitposn) ~= 0) then
      return board
   board := ior(board, bitposn)
   every board := ior(board, floodFill(board, (!moves)(x, y)))
   return board
end

method noIslands(mask)
   local zeroes, new_zeroes;
   zeroes := zerocount(mask)
   if zeroes < 5 then fail
   while mask ~= 16r3FFFFFFFFFFFF do {
      mask := floodFill(mask, findFreeCell(mask))
      new_zeroes := zerocount(mask)
      if (zeroes - new_zeroes) < 5 then fail
      zeroes := new_zeroes
      }
   return
end

method getBitmask(x,y,piece)
   local mask, cell, results;

   mask := ishift(1, (x + width*y))

   every cell := !piece do {
      results := moves[cell](x,y)
      x := results.x
      y := results.y
      if (0 <= x < width) & (0 <= y < height) then # valid
         mask := ior(mask, ishift(1, (x + width*y)))
      else {
         fail
         }
      }
   return mask
end

method allBitmasks(piece, color)
   local bitmasks, rotations, y, x, mask, cell;
   bitmasks := []
   every !2 do {
      every rotations := 1 
      		to (6 - 3*(if color = 4 then 1 else 0)) do {
         every y := 0 to height - 1 do {
            every x := 0 to width - 1 do {
               if noIslands(mask := getBitmask(x, y, piece)) 
               then {
                  put(bitmasks, mask) 
                  }
               }
            }
         every piece[cell := 1 to *piece] := rotate[piece[cell]]
         }
      every piece[cell := 1 to *piece] := flip[piece[cell]]
      }
   return bitmasks
end

method generateBitmasks()
   local piece, m, cellMask, cellCounter, j;
   local color := 0

   every piece := !pieces do {
      m := sort(allBitmasks(piece, color))
      cellMask := ishift(1, (width*height-1))
      cellCounter := width*height - 1
      j := *m
      while j > 0 do {
         if iand(m[j], cellMask) = cellMask then {
            put(masksAtCell[cellCounter + 1, color+1], m[j])
            j -:= 1
            }
         else {
            cellMask := ishift(cellMask, -1)
            cellCounter -:= 1
            }
         }
      color +:= 1
      }
end

method solveCell(cell, board, n)
   local s, color, mask;

   if *solutions >= n then {
      return
      }
   if board = 16r3FFFFFFFFFFFF then {
      s := stringOfMasks(masks)
      put(solutions, s, s) # inverse(s))
      return
      }
   if iand(board, ishift(1, cell)) ~= 0 then {
      solveCell(cell-1, board, n)
      return
      }
   if cell < 0 then {
      return
      }
   every color := 1 to 10 do {
      if masks[color] = 0 then {
         every mask := !masksAtCell[cell + 1, color] do {
            if iand(mask, board)=0 then { # legal
               masks[color] := mask
               solveCell(cell-1, ior(board, mask), n)
               masks[color] := 0
               }
            }
         }
      }
end

method solve(n)
   generateBitmasks()
   solveCell(width*height-1, 0, n)
end

method stringOfMasks(masks)
   local s, mask, color;
   s := ""
   mask := 1
   every !height do {
      every !width do {
         every color := 0 to 9 do {
            if iand(masks[color+1], mask) ~= 0 then {
               s ||:= color
               break
               }
            else if color = 9 then
               s ||:= "."
            }
         mask := ishift(mask, 1)
         }
      }
   return s
end

method inverse(s)
   local ns, x, y;
   ns := s
   write(image(s))
   every x := 0 to width - 1 do 
      every y := 0 to height - 1 do {
         ns[(x + y*width) + 1] := 
            s[(width-x-1 + (width - y - 1)*width) + 1]
         
         }
   return s
end

method printSolution(solution)
   local y, x;
   every y := 0 to height - 1 do {
      every x := 0 to width - 1 do 
         writes(solution[(x + y*width) + 1], " ")
      if (y%2) = 0 then {
         write( )
         writes(" ")
         }
      else
         write( )
      }
end

method valid(x, y)
   return (0 <= x < width) & (0 <= y < height)
end

method legal(mask, board)
   return iand(mask, board) = 0
end

method zerocount(mask)
   local x;
   static zeros_in_4bits
   local sum := -2
   initial zeros_in_4bits := 
                   [
                    4, 3, 3, 2, 3, 
                    2, 2, 1, 3, 2, 
                    2, 1, 2, 1, 1,0
                   ]
   every x := 0 to 48 by 4 do {
      sum +:= zeros_in_4bits[
                 1 + ishift(iand(ishift(15,x), mask),-x)
                            ]
      }
   return sum
end

method move_E(x, y)
   return xy(x+1, y)
end
method move_W(x, y)
   return xy(x-1,y)
end
method move_NE(x, y)
   return xy(x+(y%2), y-1)
end
method move_NW(x, y)
   return xy(x+(y%2)-1, y-1)
end
method move_SE(x, y)
   return xy(x+(y%2), y+1)
end
method move_SW(x, y)
   return xy(x+(y%2)-1, y+1)
end

method run_meteorcontest(argv)
   if *argv < 1 then stop("usage: meteor-contest num")
   width := 5
   height := 10
   
   directions :=
      table( 
            "E", 0,
            "NE", 1,
            "NW", 2,
            "W", 3,
            "SW", 4,
            "SE", 5
            )
   rotate := table(
                   "E", "NE",
                   "NE", "NW",
                   "NW", "W",
                   "W", "SW",
                   "SW", "SE",
                   "SE", "E"
                   )
   flip := table(
                 "E", "W",
                 "NE", "NW",
                 "NW", "NE",
                 "W", "E",
                 "SW", "SE",
                 "SE", "SW"
                 )
   moves := table(
                 "E", move_E,
                 "W", move_W,
                 "NE", move_NE,
                 "NW", move_NW,
                 "SE", move_SE,
                 "SW", move_SW
                 )

   pieces := [
              ["E", "E", "E", "SE"],
              ["SE", "SW", "W", "SW"],
              ["W", "W", "SW", "SE"],
              ["E",  "E", "SW", "SE"],
              ["NW", "W", "NW", "SE", "SW"],
              ["E",  "E", "NE", "W"],
              ["NW", "NE", "NE", "W"],
              ["NE", "SE", "E", "NE"],
              ["SE", "SE", "E", "SE"],
              ["E", "NW", "NW", "NW"]
              ]
   solutions := []
   masks := list(10, 0)
   
   masksAtCell := list(width * height)
   every !masksAtCell := [[], [], [], [], [], [], [], [], [], []]

   solve(argv[1])
   write(*solutions, " solutions found\n")
   if (*solutions > 0) then {
   	# write(solutions);
	printSolution(min(solutions))
	write( )
	printSolution(max(solutions))
	write( )
   }
end 

method main(argv)
   run_meteorcontest(argv)
end 

}

#==== END OF FILE
